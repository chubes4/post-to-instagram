---
description: 
globs: 
alwaysApply: false
---
**Project Plan: Post to Instagram WordPress Plugin**

**Date:** [Update to today's date]

**High Priority:**
1. Implement ImagePreviewModal (gallery modal for previewing/navigating selected images, aspect-ratio thumbnails, keyboard navigation).
2. Add captioning UI and integrate with posting logic.
3. Implement posting logic: upload images to Instagram, create carousel, publish, handle errors.

**Medium Priority:**
1. Image tracking & metadata: store and display which images have been shared/scheduled.
2. Scheduling UI: allow user to schedule posts, save as CPT, and WP Cron integration.
3. Admin view for scheduled posts (CPT list table).

**Low Priority:**
1. Advanced scheduling options, AI-generated captions, video/story support, bulk actions.

**Known Bugs:**
- None currently tracked; all major blockers resolved as of this update.

**Ideas:**
- Open source launch checklist, developer hooks/filters, extensibility for other social platforms.

---

**Project Plan: Post to Instagram WordPress Plugin**

**Date:** [Current Date]

**High Priority:**
**Project Plan: Post to Instagram WordPress Plugin**

**Date:** [Current Date]

**High Priority:**

1.  **Core Plugin Setup (`post-to-instagram.php`):**
    *   Plugin headers (Name, Version, Author, Description, etc.).
    *   Define essential constants (plugin path, URL, version, main file).
    *   Basic security checks (prevent direct access).
    *   Include autoloader or main class/files from `admin/`, `auth/`, `schedule/` directories.
    *   Activation/deactivation hooks (if needed for options, roles, or cron setup/cleanup).

2.  **Authentication Module (`auth/`):**
    *   **Instagram Graph API OAuth 2.0 Flow:**
        *   Class (`auth/class-auth-handler.php`) to manage authentication logic.
        *   Method to generate the Instagram authorization URL (requires App ID).
        *   Handler for the OAuth redirect URI:
            *   Receive authorization code.
            *   Exchange code for a short-lived access token (requires App ID & App Secret).
            *   Exchange short-lived token for a long-lived access token.
        *   Securely store App ID, App Secret, long-lived access token, and associated user ID in `wp_options` (e.g., under `pti_settings` key as `app_id`, `app_secret`, `auth_details`).
        *   Function to check if the site is authenticated (`is_authenticated()`), which also implies App ID/Secret are present.
        *   (Future iteration: Token refresh mechanism before expiry).
    *   **Authentication & App Setup Modal (triggered from Post Editor if not configured/authenticated):**
        *   JavaScript in `admin/assets/js/` to manage modal display.
        *   Modal content:
            *   Input fields for Instagram App ID and App Secret (if not already saved).
            *   "Connect to Instagram" button that initiates the OAuth flow if App ID/Secret are provided.
            *   "Disconnect Instagram Account" button (clears stored App ID, App Secret, and auth tokens from `wp_options`).
        *   REST endpoint to save App ID/Secret and to check authentication status on page load or button click (no more admin-ajax).

2a.  **REST API Endpoints (`includes/`):**
    *   All REST API endpoints for the plugin are registered in `includes/class-pti-rest-api.php`.
    *   This class is required and instantiated in the main plugin file and is always loaded.
    *   All authentication, posting, scheduling, and future endpoints are handled here (no admin-ajax).

3.  **Admin Interface - Post Editor Integration (`admin/`):**
    *   **"Post to Instagram" Sidebar Panel/Button:**
        *   Class (`admin/class-admin-ui.php`) to register a sidebar panel in the block editor (or meta box for classic editor).
        *   The panel will contain the "Post to Instagram" button.
    *   **Button Click Logic (handled by `admin/assets/js/post-editor.js`):**
        *   `admin/assets/js/post-editor.js` created with initial structure for sidebar, state management (isConfigured, isAuthenticated), and placeholder UI for different states.
        *   Check if App ID/Secret are configured and if user is authenticated (via AJAX or localized script variable).
        *   If App ID/Secret are missing or user not authenticated, display the Authentication & App Setup Modal.
        *   If configured and authenticated, launch the Image Selection Modal.
    *   **Image Selection Modal:**
        *   Utilize `wp.media` JavaScript API to create a modal.
        *   Filter media library to show only images attached/uploaded to the current post.
        *   Enable multi-select for images (up to 10, as per Instagram carousel limits).
        *   Interface to indicate/disable images already shared or scheduled (requires image tracking).

4.  **Posting Workflow (Sequential Modals/Views within `wp.media` frame or custom modal):**
    *   **Step 1: Image Selection** (Covered above).
    *   **Step 2: Reorder & Caption Modal View:**
        *   Display selected images with thumbnails.
        *   Implement drag-and-drop reordering for selected images.
        *   Provide a textarea for a single caption for the entire Instagram post (carousel).
    *   **Step 3: Post/Schedule Options & Action:**
        *   "Post Now" button.
        *   "Schedule Post" button (UI for selecting date/time).
        *   AJAX handler (`wp_ajax_pti_submit_post`) to process the submission.

5.  **Instagram API Integration (Posting Logic):**
    *   Class (`includes/class-instagram-api.php` or within `admin/`) for API communication.
    *   Method to get the authenticated Instagram User ID and access token.
    *   Method to upload images to Instagram's servers (for carousels, each image needs to be uploaded to get a container ID). This involves:
        *   Uploading image publicly accessible URL.
        *   Creating media containers for each image.
    *   Method to create a carousel container with the array of image container IDs and the caption.
    *   Method to publish the carousel container.
    *   Robust error handling and user feedback for API requests.

**Medium Priority:**

1.  **Image Tracking & Metadata:**
    *   Store metadata on WordPress posts or attachments to track Instagram share status.
        *   Example post meta: `_pti_instagram_shared_images` (array of objects: `{attachment_id, instagram_media_id, timestamp}`).
        *   Example attachment meta: `_pti_instagram_status` (`shared`, `scheduled`), `_pti_instagram_media_id`.
    *   Update Image Selection Modal to visually indicate status and potentially disable selection of already shared items.
    *   Functions to update this metadata after successful posts or scheduling.

2.  **Scheduling Functionality (`schedule/`):**
    *   **Data Storage for Scheduled Posts:**
        *   Custom Post Type (e.g., `pti_scheduled_ig_post`) to store:
            *   Target WordPress post ID.
            *   Selected attachment IDs.
            *   Caption.
            *   Scheduled publish time (UTC).
            *   Status (e.g., `pending`, `processing`, `published`, `failed`).
            *   Error messages if failed.
    *   **Scheduling UI (in Step 3 of Posting Workflow):**
        *   Clean date and time picker.
        *   Save data as a new `pti_scheduled_ig_post`.
    *   **WP Cron Job (`schedule/class-scheduler.php`):**
        *   Register a custom cron interval (e.g., every 5 or 15 minutes).
        *   Cron task to query for `pti_scheduled_ig_post` with status `pending` and scheduled time <= now.
        *   For each due post, use the Instagram API integration logic to publish it.
        *   Update the CPT status (`published`, `failed`) and log results.
    *   **Admin View for Scheduled Posts (Basic):**
        *   Simple list table view for `pti_scheduled_ig_post` CPT in WP Admin to see upcoming, failed, and successfully processed scheduled posts.

3.  **Refinements & UX:**
    *   Ensure all interactions are smooth using AJAX, with clear loading indicators and user feedback (success/error notifications using WordPress admin notices API).
    *   Secure all AJAX endpoints with WordPress nonces.
    *   Enqueue CSS (`