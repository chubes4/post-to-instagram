---
description: 
globs: 
alwaysApply: false
---
**Project Architecture: Post to Instagram WordPress Plugin**

**Date:** [Update to today's date]

**1. Introduction**

The "Post to Instagram" plugin enables WordPress users to publish images from their posts directly to a connected Instagram account. It integrates natively into the block editor, providing a streamlined, WordPress-native workflow for selecting images, reordering, captioning, and posting or scheduling to Instagram. The codebase is modular, React-based, and adheres to WordPress and open source best practices.

**Goals:**
* Simple, intuitive UI for posting images to Instagram.
* Secure OAuth 2.0 authentication (App ID/Secret setup, token storage).
* Multi-image (carousel) posting with drag-and-drop reordering.
* Scheduling functionality (future).
* Track which images have been shared or scheduled.
* Maintain a lightweight, modular, and open-source-ready codebase.

**High-Level Overview:**

- **Directories:**
  - `admin/`: WP admin UI, block editor integration, JS/CSS assets.
  - `auth/`: Instagram authentication (OAuth, token storage, handler page).
  - `schedule/`: (Planned) Post scheduling via WP Cron.
  - Main plugin file (`post-to-instagram.php`): Initializes plugin, loads dependencies, handles hooks.

**Data Flow:**
1. User clicks "Post to Instagram" in the post editor sidebar.
2. Plugin checks App ID/Secret and authentication status (via REST API and localized data).
3. If not configured/authenticated, shows setup/auth modal (collects App ID/Secret, initiates OAuth popup).
4. OAuth flow uses a path-based redirect (`/pti-oauth/`), handled by a dedicated PHP handler and a static HTML handler page for postMessage communication and auto-closing the popup.
5. If authenticated, opens a WordPress-native media modal for image selection.
6. ImageSelectModal dynamically collects all image IDs from the current post's block content (core/image, core/gallery), with PHP fallback for classic editor. Only these images (plus featured) are shown, using `query: { include: allowedIds }`.
7. User selects up to 10 images (API constraint), which are previewed in the sidebar.
8. User can drag-and-drop reorder images in the sidebar (ReorderableImageList), with thumbnails shown in the aspect ratio of the first image. Cropping notice is displayed.
9. (Planned) Clicking a thumbnail opens ImagePreviewModal for gallery navigation and preview.
10. (Planned) User adds a caption and chooses to post now or schedule.
11. (Planned) Images are uploaded to Instagram via the Graph API, and metadata is updated.

**2. Core Components & Features**

**2.1. Main Plugin File (`post-to-instagram.php`)**
- Initializes the plugin, loads all modules, defines constants, and handles activation/deactivation hooks (including rewrite rules for OAuth path).
- Instantiates `PTI_Auth_Handler` on all requests (for OAuth handling), and `PTI_Admin_UI` in admin.

**2.2. Authentication Module (`auth/`)**
- Handles all Instagram OAuth 2.0 logic (App ID/Secret storage, token exchange, redirect handling).
- Uses a path-based redirect (`/pti-oauth/`) for robust compatibility.
- After successful auth, redirects to a static handler page (`oauth-handler.html`) that sends a postMessage to the opener and auto-closes the popup.
- All credentials and tokens are stored in the `pti_settings` option.

**2.2a. REST API Endpoints (`includes/class-pti-rest-api.php`)**
- All plugin REST API endpoints are registered here, decoupled from business logic.
- Endpoints for checking auth status, saving credentials, and (future) posting/scheduling.

**2.3. Admin Interface & Post Editor Integration (`admin/`)**
- Registers the sidebar panel in the block editor (Gutenberg), enqueues JS/CSS assets with dynamic versioning.
- Modular React components:
  - `AuthPanel`: Handles App ID/Secret input, authentication state, and disconnect.
  - `ImageSelectModal`: Uses block editor JS data store to collect all image IDs from core/image and core/gallery blocks (unsaved content supported), with PHP fallback for classic editor. Only these images (plus featured) are shown in the modal, using `query: { include: allowedIds }`.
  - `ReorderableImageList`: Drag-and-drop reordering of selected images in the sidebar, thumbnails shown in the aspect ratio of the first image. Cropping notice is displayed. Selection is limited to 10 images (API constraint).
  - (Planned) `ImagePreviewModal`: Gallery modal for previewing and navigating selected images.
- All UI is WordPress-native, lightweight, and modular.

**2.4. Instagram API Communication (Planned, `includes/`)**
- Will encapsulate all Graph API communication for posting and scheduling.
- Will handle uploading images, creating carousel containers, publishing, and error handling.

**2.5. Scheduling Module (`schedule/`) (Planned)**
- Will manage scheduled posts via WP Cron and a custom CPT.

**2.6. Image Tracking & Metadata (Planned)**
- Will track which images have been shared or scheduled using post/attachment meta.

**3. Dependencies**
- WordPress 5.0+
- PHP 7.4+
- Instagram Graph API (App ID/Secret required)

**4. Important Variables & Nonces**
- `pti_settings` (option): Stores App ID, App Secret, and auth details.
- `content_image_ids` (localized): Array of image IDs in post content/featured.
- Nonces: `pti_save_app_creds_nonce`, `pti_disconnect_nonce`, `pti_post_media_nonce`, `pti_schedule_media_nonce` (for AJAX), REST uses `wp_rest` nonce.

**5. Future Enhancements**
- ImagePreviewModal, captioning UI, posting/scheduling logic, image tracking, admin view for scheduled posts, AI-generated captions, video/story support.

**Contradictions/Redundancies:**
- None currently found; all code and docs are in sync as of this update.

---
