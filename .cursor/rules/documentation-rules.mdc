---
description: 
globs: 
alwaysApply: false
---
You are now creating, updating, or refining .mdc files in the .cursor/rules directory. You must follow these documentation rules closely. If you find that the documentation does not follow these rules, you must recactor the documentation directly.  

The project should always have at least two main .mdc files:

1. .cursor/rules/project-architecture.mdc - this file outlines the codebase and provides a high level, yet extremely specific overview of how everything works. It is developer-facing documentation designed to provide detailed context of the codebase an how it works for the developers. It provides complete clarity on the function, purpose, and goals of the project, and is organized into sections. The top section is the introduction, explaining the project's basic purpose, and it's goals and high level overview. Then, it gets into the nitty gritty breakdown of existing major features, how each one works, and which files, functions, and dependences are involved. Each major feature is given its own heading and dedicated section. The file notes dependencies, important variables, nonce names, and other relevant files and features, including how they interact with one another. It also notes the overall file structure of the codebase. More complex features are broken into detailed modules and referenced from here when relevant (see below for more).

2. .cursor/rules/project-plan.mdc  - this file contains the immediate action plan and future outlook for features and refactor ideas. It is organized by priority in 5 sections: high, medium, low, known bugs, and ideas. This document should ONLY contain forward-looking steps, and should NOT contain any architecture. All completed steps should be deleted from this file and documented in the appropriate places. This document serves as a high-level overview of the project's future vision and helps us decide what to work on next. 

These two main .mdc files are tightly coupled and always accurate and up-to-date. If you find that there is discrepancy between the documentation and the codebase, you should always update the documentation to be explicitly accurate. 

For large refactors or complex feature ideas, we will create dedicated .mdc files that will encapsulate the plan for that specific refactor, and after completing, we will update the file to provide a detailed architecture of the feature itself. We will update the main @project-architecture.mdc file to reference the modular documentation for more details where relevant, transforming the main architecture file to a directory, or documentation of documentations, once the codebase becomes large. These .mdc files will be created at the request of the user, and will be equally detailed and accurate, focusing on developer clarity and efficiency. 

##Key Considerations

When updating .mdc files, ALWAYS make sure that the flow is clear. You should NEVER simply append new information to the end unless it makes sense to do so. The document is LIVING, and BREATHING, and always clear and clean. 

Always clearly specify the required naming convention for data keys passed from PHP to JS.

Do NOT change the definition and frequency block at the very top of the file between the three dashes (---).

You MUST note any contradictions or redundancies you discover and note them and make plans to repair them. 

The DATE is only included once at the top of each .mdc file.

We should focus on detailed, step-by-step, and bite-sized chunks to ensure accuracy when using AI tools.